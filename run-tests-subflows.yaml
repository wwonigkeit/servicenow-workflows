#
# NOTE: The workflow sets up testing parameters for the servicenow workflow example
# Can be an event driven workflow or a subflow invoked workflow. The workflow requires the following input:
#     Servicenow.com URL: Servicenow.com URL in format https://dev80617.service-now.com
#     Servicenow.com Username: Servicenow.com username for basic authentication
#     Servicenow.com Password: Servicenow.com password for basic authentication
#     Action: Can be any of the following:
#       - list: Retrieves a list of all records from the "incident"/"change" table.
#       - get: Retrieves a specified record from the "incident"/"change" table.
#       - update: Updates a specified record in  the "incident"/"change" table.
#       - create: Creates a record in the "incident"/"change" table.
#       - delete: Deletes a record in the "incident"/"change" table.
#  

description: Service-now.com incident & change management testing workflow (using subflows)

#
# Define the "subflows" to run for each of the tests
#
functions:
- id: run-incident
  type: subflow
  workflow: incident/snc-incident-subflow
- id: run-change
  type: subflow
  workflow: change/snc-change-subflow


states:
# Validate the input to the workflow. Only the absolutes are validated.
- id: validate
  type: validate
  schema:
    title: "Validate the input to the incident creation workflow"
    type: object
    required: ["sncurl", "sncusername","sncpassword","action"]
    properties:
      sncurl:
        title: "Servicenow.com URL in format https://dev80617.service-now.com"
        type: string
        default: "https://dev138642.service-now.com/"
      sncusername:
        title: "Servicenow.com username for basic authentication"
        type: string
        default: "admin"
      sncpassword:
        title: "Servicenow.com password for basic authentication"
        type: string
        default: "d+iti9^W6BEP"
      workflow:
        title: "The workflow to test"
        type: string
        enum: ["incident", "change"]
        default: "incident"
      action:
        title: "Action can be list, get, update or create"
        type: string
        enum: ["list", "get", "create", "update", "delete"]
        default: "list"
      incident_sys_id:
        title: "Incident sys_id to get details for"
        type: string
        default: "57af7aec73d423002728660c4cf6a71c"
      change_sys_id:
        title: "Change request sys_id to get details for"
        type: string
        default: "c83c5e5347c12200e0ef563dbb9a7190"
      description:
        title: "Long description for the incident/change creation or update"
        type: string
        default: "Long description for the incident/change creation or update"
      impact:
        title: "Impact for the incident/change creation or update"
        type: number
        default: 3
      severity:
        title: "Severity ranging from 1 - High to 3 - Low"
        type: number
        default: 3
      short_description:
        title: "Short description for the incident/change creation or update"
        type: string
        default: "Short description for the incident/change creation or update"
  transition: transition-workflow

#
# The first state is used to transition to the correct workflow defined by the "workflow" JSON input.
# This is a simple switch state
#
- id: transition-workflow
  type: switch
  conditions:
  - condition: jq(.workflow == "incident")
    transition: run-incident
  - condition: jq(.workflow == "change")
    transition: run-change
  defaultTransition: exception-catch

#
# Run the incident workflow tests using subflows
#
- id: run-incident
  log: jq(.)
  type: action
  action:
    function: run-incident
    input: jq(.)
    retries:
      max_attempts: 3
      delay: PT30S
      multiplier: 2.0
      codes: [".*"]
  catch:
    - error: "*"
      transition: exception-catch
  transition: print-results

#
# Run the change workflow tests using subflows
#
- id: run-change
  log: jq(.)
  type: action
  action:
    function: run-change
    input: jq(.)
    retries:
      max_attempts: 3
      delay: PT30S
      multiplier: 2.0
      codes: [".*"]
  catch:
    - error: "*"
      transition: exception-catch
  transition: print-results

#
# Print the output fpor the test workflows
#
- id: print-results
  type: noop
  log: jq(.)

#
# Handle any failed connections
#
- id: exception-catch
  type: noop
  log: jq(.)
